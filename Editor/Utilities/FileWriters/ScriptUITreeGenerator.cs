using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using UIToolkit.Attributes;
using UnityEditor;
using UnityEngine;

namespace UIToolkit.Editor.Utilities.FileWriters
{
    public static class ScriptUITreeGenerator
    {
        private static readonly string PATH = Path.Combine(Application.dataPath, "Editor", "Custom Inspectors");

        //Classes
        //================================================================================================================//
        /// <summary>
        /// A collection of elements meant to be grouped together in the Inspector
        /// </summary>
        private class MemberGroupInfo
        {
            public GroupBaseAttribute myGroupBaseAttribute;
            public List<object> Objects;
        }
        //Static Properties
        //================================================================================================================//

        private static Dictionary<Type, List<MethodInfo>> s_ButtonFunctions;
        private static Dictionary<Type, List<LabelBindingData>> s_LabelBindingData;
        private static Dictionary<Type, List<ConditionalData>> s_ConditionalFieldData;

        //================================================================================================================//

        //[UnityEditor.Callbacks.DidReloadScripts]
        private static void OnScriptsReloaded()
        {
            //----------------------------------------------------------//

            Type[] GetAllScriptsWithGenerateUXMLAttribute()
            {
                return (from a in AppDomain.CurrentDomain.GetAssemblies()
                    from t in a.GetTypes()
                    let attributes = t.GetCustomAttributes(typeof(GenerateUXMLAttribute), true)
                    where attributes != null && attributes.Length > 0
                    select t).ToArray();
            }

            //----------------------------------------------------------//

            //Based on: https://stackoverflow.com/a/607204
            var typesWithGenerateUxml = GetAllScriptsWithGenerateUXMLAttribute();
            
            if (typesWithGenerateUxml.Length == 0)
                return;

            //Setup dictionaries used to pass information to the Script Generator
            s_ButtonFunctions = new Dictionary<Type, List<MethodInfo>>();
            s_LabelBindingData = new Dictionary<Type, List<LabelBindingData>>();
            s_ConditionalFieldData = new Dictionary<Type, List<ConditionalData>>();

            //Iterate through all of the scripts that use the [GenerateUXML] attribute
            for (int i = 0; i < typesWithGenerateUxml.Length; i++)
            {
                var type = typesWithGenerateUxml[i];

                //Add a new entry on the dictionaries for the current type
                s_ButtonFunctions.Add(type, new List<MethodInfo>());
                s_LabelBindingData.Add(type, new List<LabelBindingData>());
                s_ConditionalFieldData.Add(type, new List<ConditionalData>());
                
                var generatedCode = GenerateTreeCode(type);
                TryCreateUxmlFile(type, generatedCode);
                ScriptGenerator.CreateCustomEditor(type,
                    s_ButtonFunctions[type],
                    s_LabelBindingData[type],
                    s_ConditionalFieldData[type]);
            }

            Debug.Log("Generated Custom Editor Scripts & UXML for:<b>\n\t- " +
                      $"{string.Join("\n\t- ", typesWithGenerateUxml.Select(x => x.Name))}</b>");

            AssetDatabase.Refresh();
        }

        //Generate UXML
        //================================================================================================================//

        private static string GenerateUXMLCode(in Type type)
        {
            var writer = new UXMLWriter
            {
                buffer = new StringBuilder()
            };

            //Write Header
            writer.WriteLine(WriterHelper.MakeAutoGeneratedCodeXMLHeader(
                "UXML Generator",
                new Version(0, 0, 1).ToString(),
                nameof(UXMLGenerator)));

            writer.WriteLine();

            //Write UXML starter
            writer.WriteLine("<ui:UXML xmlns:ui=\"UnityEngine.UIElements\" xmlns:uie=\"UnityEditor.UIElements\" editor-extension-mode=\"True\">");
            writer.Indent();
            //Add custom Style Sheet
            writer.WriteLine("<Style src=\"project://database/Packages/com.miniproject.uitoolkitattributes/Editor/Styles/UXMLStyles.uss\" />");
            //Get type members that are not constructors, ordered by their metadata token
            var memberInfos = type.GetMembers(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public)
                .Where(x => (x is ConstructorInfo) == false)
                .OrderBy(x => x.MetadataToken)
                .ToArray();

            //Group members together by the specified header name
            var groupedMembers = TryGetGroupedMembers(memberInfos);

            for (var i = 0; i < groupedMembers.Count; i++)
            {
                switch (groupedMembers[i])
                {
                    case FieldInfo fieldInfo:
                        if (fieldInfo.IsPrivate &&
                            fieldInfo.GetCustomAttributes(typeof(SerializeField), false).Length == 0)
                            continue;
                        //Write fields
                        GetFieldAsUXML(type, ref writer, fieldInfo);
                        break;
                    case MemberGroupInfo memberGroupInfo:
                        GetGroupUXML(type, ref writer, memberGroupInfo);
                        break;
                    case MethodInfo methodInfo:
                        GetMethodAsUxml(type, methodInfo, ref writer);
                        break;
                }
            }

            //End Field Block
            writer.Outdent();

            //Close File
            writer.WriteLine("</ui:UXML>");

            return writer.buffer.ToString();
        }
    }
}