using System.Linq;
using System.Text;

namespace UIToolkit.Editor.Utilities.FileWriters
{
    internal struct Writer
    {
        private const int kSpacesPerIndentLevel = 4;

        public StringBuilder buffer;
        public int indentLevel;

        public void BeginBlock()
        {
            WriteIndent();
            buffer.Append("{\n");
            ++indentLevel;
        }

        public void EndBlock()
        {
            --indentLevel;
            WriteIndent();
            buffer.Append("}\n");
        }
        public void EndBlock(in char addChar)
        {
            --indentLevel;
            WriteIndent();
            buffer.Append("}" + addChar + "\n");
        }

        public void WriteLine()
        {
            buffer.Append('\n');
        }

        public void WriteLine(string text)
        {
            if (!text.All(char.IsWhiteSpace))
            {
                WriteIndent();
                buffer.Append(text);
            }

            buffer.Append('\n');
        }

        public void Write(string text)
        {
            buffer.Append(text);
        }

        public void WriteIndent()
        {
            for (var i = 0; i < indentLevel; ++i)
            {
                for (var n = 0; n < kSpacesPerIndentLevel; ++n)
                    buffer.Append(' ');
            }
        }
    }
    internal struct UXMLWriter
    {
        private const int kSpacesPerIndentLevel = 4;

        public StringBuilder buffer;
        public int indentLevel;

        public void Indent()
        {
            ++indentLevel;
        }

        public void Outdent()
        {
            --indentLevel;
        }

        public void WriteLine()
        {
            buffer.Append('\n');
        }

        public void WriteLine(string text)
        {
            if (!text.All(char.IsWhiteSpace))
            {
                WriteIndent();
                buffer.Append(text);
            }

            buffer.Append('\n');
        }

        public void Write(string text)
        {
            buffer.Append(text);
        }

        public void WriteIndent()
        {
            for (var i = 0; i < indentLevel; ++i)
            {
                for (var n = 0; n < kSpacesPerIndentLevel; ++n)
                    buffer.Append(' ');
            }
        }
    }
    
    internal static class WriterHelper
    {
        internal static string MakeAutoGeneratedCodeHeader(string toolName, string toolVersion, string sourceFileName = null)
        {
            return
                "//------------------------------------------------------------------------------\n"
                + "// <auto-generated>\n"
                + $"//     This code was auto-generated by {toolName}\n"
                + $"//     version {toolVersion}\n"
                + (string.IsNullOrEmpty(sourceFileName) ? "" : $"//     from {sourceFileName}\n")
                + "//\n"
                + "//     Changes to this file may cause incorrect behavior and will be lost if\n"
                + "//     the code is regenerated.\n"
                + "// </auto-generated>\n"
                + "//------------------------------------------------------------------------------\n";
        }
        internal static string MakeAutoGeneratedCodeXMLHeader(string toolName, string toolVersion, string sourceFileName = null)
        {
            return
                "<!--\n"
                + "// <auto-generated>\n"
                + $"//     This code was auto-generated by {toolName}\n"
                + $"//     version {toolVersion}\n"
                + (string.IsNullOrEmpty(sourceFileName) ? "" : $"//     from {sourceFileName}\n")
                + "//\n"
                + "//     Changes to this file may cause incorrect behavior and will be lost if\n"
                + "//     the code is regenerated.\n"
                + "// </auto-generated>\n"
                + "-->\n";
        }
    }
}